{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "definitions": {
        "AbortSignal": {
            "additionalProperties": false,
            "properties": {
                "aborted": {
                    "type": "boolean"
                },
                "onabort": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "type": "object"
                        },
                        {
                            "type": "null"
                        }
                    ]
                },
                "reason": {}
            },
            "required": [
                "aborted",
                "onabort",
                "reason"
            ],
            "type": "object"
        },
        "Agent": {
            "additionalProperties": false,
            "description": "An `Agent` is responsible for managing connection persistence\nand reuse for HTTP clients. It maintains a queue of pending requests\nfor a given host and port, reusing a single socket connection for each\nuntil the queue is empty, at which time the socket is either destroyed\nor put into a pool where it is kept to be used again for requests to the\nsame host and port. Whether it is destroyed or pooled depends on the`keepAlive` `option`.\n\nPooled connections have TCP Keep-Alive enabled for them, but servers may\nstill close idle connections, in which case they will be removed from the\npool and a new connection will be made when a new HTTP request is made for\nthat host and port. Servers may also refuse to allow multiple requests\nover the same connection, in which case the connection will have to be\nremade for every request and cannot be pooled. The `Agent` will still make\nthe requests to that server, but each one will occur over a new connection.\n\nWhen a connection is closed by the client or the server, it is removed\nfrom the pool. Any unused sockets in the pool will be unrefed so as not\nto keep the Node.js process running when there are no outstanding requests.\n(see `socket.unref()`).\n\nIt is good practice, to `destroy()` an `Agent` instance when it is no\nlonger in use, because unused sockets consume OS resources.\n\nSockets are removed from an agent when the socket emits either\na `'close'` event or an `'agentRemove'` event. When intending to keep one\nHTTP request open for a long time without keeping it in the agent, something\nlike the following may be done:\n\n```js\nhttp.get(options, (res) => {\n  // Do stuff\n}).on('socket', (socket) => {\n  socket.emit('agentRemove');\n});\n```\n\nAn agent may also be used for an individual request. By providing`{agent: false}` as an option to the `http.get()` or `http.request()`functions, a one-time use `Agent` with default options\nwill be used\nfor the client connection.\n\n`agent:false`:\n\n```js\nhttp.get({\n  hostname: 'localhost',\n  port: 80,\n  path: '/',\n  agent: false  // Create a new agent just for this one request\n}, (res) => {\n  // Do stuff with response\n});\n```",
            "properties": {
                "freeSockets": {
                    "$ref": "#/definitions/NodeJS.ReadOnlyDict<Socket[]>",
                    "description": "An object which contains arrays of sockets currently awaiting use by\nthe agent when `keepAlive` is enabled. Do not modify.\n\nSockets in the `freeSockets` list will be automatically destroyed and\nremoved from the array on `'timeout'`."
                },
                "maxFreeSockets": {
                    "description": "By default set to 256\\. For agents with `keepAlive` enabled, this\nsets the maximum number of sockets that will be left open in the free\nstate.",
                    "type": "number"
                },
                "maxSockets": {
                    "description": "By default set to `Infinity`. Determines how many concurrent sockets the agent\ncan have open per origin. Origin is the returned value of `agent.getName()`.",
                    "type": "number"
                },
                "maxTotalSockets": {
                    "description": "By default set to `Infinity`. Determines how many concurrent sockets the agent\ncan have open. Unlike `maxSockets`, this parameter applies across all origins.",
                    "type": "number"
                },
                "requests": {
                    "$ref": "#/definitions/NodeJS.ReadOnlyDict<IncomingMessage[]>",
                    "description": "An object which contains queues of requests that have not yet been assigned to\nsockets. Do not modify."
                },
                "sockets": {
                    "$ref": "#/definitions/NodeJS.ReadOnlyDict<Socket[]>",
                    "description": "An object which contains arrays of sockets currently in use by the\nagent. Do not modify."
                }
            },
            "required": [
                "freeSockets",
                "maxFreeSockets",
                "maxSockets",
                "maxTotalSockets",
                "requests",
                "sockets"
            ],
            "type": "object"
        },
        "ArrayBuffer": {
            "additionalProperties": false,
            "properties": {
                "__@toStringTag@533": {
                    "type": "string"
                },
                "byteLength": {
                    "type": "number"
                }
            },
            "required": [
                "__@toStringTag@533",
                "byteLength"
            ],
            "type": "object"
        },
        "ClientOptions": {
            "additionalProperties": false,
            "properties": {
                "agent": {
                    "$ref": "#/definitions/Agent"
                },
                "ca": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Optionally override the trusted CA certificates. Default is to trust\nthe well-known CAs curated by Mozilla. Mozilla's CAs are completely\nreplaced when CAs are explicitly specified using this option."
                },
                "cert": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Cert chains in PEM format. One cert chain should be provided per\nprivate key. Each cert chain should consist of the PEM formatted\ncertificate for a provided private key, followed by the PEM\nformatted intermediate certificates (if any), in order, and not\nincluding the root CA (the root CA must be pre-known to the peer,\nsee ca). When providing multiple cert chains, they do not have to\nbe in the same order as their private keys in key. If the\nintermediate certificates are not provided, the peer will not be\nable to validate the certificate, and the handshake will fail."
                },
                "ciphers": {
                    "description": "Cipher suite specification, replacing the default. For more\ninformation, see modifying the default cipher suite. Permitted\nciphers can be obtained via tls.getCiphers(). Cipher names must be\nuppercased in order for OpenSSL to accept them.",
                    "type": "string"
                },
                "clientCertEngine": {
                    "description": "Name of an OpenSSL engine which can provide the client certificate.",
                    "type": "string"
                },
                "crl": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "PEM formatted CRLs (Certificate Revocation Lists)."
                },
                "dhparam": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Diffie Hellman parameters, required for Perfect Forward Secrecy. Use\nopenssl dhparam to create the parameters. The key length must be\ngreater than or equal to 1024 bits or else an error will be thrown.\nAlthough 1024 bits is permissible, use 2048 bits or larger for\nstronger security. If omitted or invalid, the parameters are\nsilently discarded and DHE ciphers will not be available."
                },
                "ecdhCurve": {
                    "description": "A string describing a named curve or a colon separated list of curve\nNIDs or names, for example P-521:P-384:P-256, to use for ECDH key\nagreement. Set to auto to select the curve automatically. Use\ncrypto.getCurves() to obtain a list of available curve names. On\nrecent releases, openssl ecparam -list_curves will also display the\nname and description of each available elliptic curve. Default:\ntls.DEFAULT_ECDH_CURVE.",
                    "type": "string"
                },
                "family": {
                    "type": "number"
                },
                "followRedirects": {
                    "type": "boolean"
                },
                "handshakeTimeout": {
                    "type": "number"
                },
                "headers": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "honorCipherOrder": {
                    "description": "Attempt to use the server's cipher suite preferences instead of the\nclient's. When true, causes SSL_OP_CIPHER_SERVER_PREFERENCE to be\nset in secureOptions",
                    "type": "boolean"
                },
                "host": {
                    "type": "string"
                },
                "key": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "$ref": "#/definitions/KeyObject"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Private keys in PEM format. PEM allows the option of private keys\nbeing encrypted. Encrypted keys will be decrypted with\noptions.passphrase. Multiple keys using different algorithms can be\nprovided either as an array of unencrypted key strings or buffers,\nor an array of objects in the form {pem: <string|buffer>[,\npassphrase: <string>]}. The object form can only occur in an array.\nobject.passphrase is optional. Encrypted keys will be decrypted with\nobject.passphrase if provided, or options.passphrase if it is not."
                },
                "localAddress": {
                    "type": "string"
                },
                "maxPayload": {
                    "type": "number"
                },
                "maxRedirects": {
                    "type": "number"
                },
                "maxVersion": {
                    "description": "Optionally set the maximum TLS version to allow. One\nof `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\n`secureProtocol` option, use one or the other.\n**Default:** `'TLSv1.3'`, unless changed using CLI options. Using\n`--tls-max-v1.2` sets the default to `'TLSv1.2'`. Using `--tls-max-v1.3` sets the default to\n`'TLSv1.3'`. If multiple of the options are provided, the highest maximum is used.",
                    "enum": [
                        "TLSv1",
                        "TLSv1.1",
                        "TLSv1.2",
                        "TLSv1.3"
                    ],
                    "type": "string"
                },
                "minVersion": {
                    "description": "Optionally set the minimum TLS version to allow. One\nof `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\n`secureProtocol` option, use one or the other.  It is not recommended to use\nless than TLSv1.2, but it may be required for interoperability.\n**Default:** `'TLSv1.2'`, unless changed using CLI options. Using\n`--tls-v1.0` sets the default to `'TLSv1'`. Using `--tls-v1.1` sets the default to\n`'TLSv1.1'`. Using `--tls-min-v1.3` sets the default to\n'TLSv1.3'. If multiple of the options are provided, the lowest minimum is used.",
                    "enum": [
                        "TLSv1",
                        "TLSv1.1",
                        "TLSv1.2",
                        "TLSv1.3"
                    ],
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "passphrase": {
                    "description": "Shared passphrase used for a single private key and/or a PFX.",
                    "type": "string"
                },
                "perMessageDeflate": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/PerMessageDeflateOptions"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "pfx": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "$ref": "#/definitions/PxfObject"
                                    },
                                    {
                                        "type": "string"
                                    }
                                ]
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "PFX or PKCS12 encoded private key and certificate chain. pfx is an\nalternative to providing key and cert individually. PFX is usually\nencrypted, if it is, passphrase will be used to decrypt it. Multiple\nPFX can be provided either as an array of unencrypted PFX buffers,\nor an array of objects in the form {buf: <string|buffer>[,\npassphrase: <string>]}. The object form can only occur in an array.\nobject.passphrase is optional. Encrypted PFX will be decrypted with\nobject.passphrase if provided, or options.passphrase if it is not."
                },
                "privateKeyEngine": {
                    "description": "Name of an OpenSSL engine to get private key from. Should be used\ntogether with privateKeyIdentifier.",
                    "type": "string"
                },
                "privateKeyIdentifier": {
                    "description": "Identifier of a private key managed by an OpenSSL engine. Should be\nused together with privateKeyEngine. Should not be set together with\nkey, because both options define a private key in different ways.",
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "protocolVersion": {
                    "type": "number"
                },
                "rejectUnauthorized": {
                    "type": "boolean"
                },
                "secureOptions": {
                    "description": "Optionally affect the OpenSSL protocol behavior, which is not\nusually necessary. This should be used carefully if at all! Value is\na numeric bitmask of the SSL_OP_* options from OpenSSL Options",
                    "type": "number"
                },
                "secureProtocol": {
                    "description": "Legacy mechanism to select the TLS protocol version to use, it does\nnot support independent control of the minimum and maximum version,\nand does not support limiting the protocol to TLSv1.3. Use\nminVersion and maxVersion instead. The possible values are listed as\nSSL_METHODS, use the function names as strings. For example, use\n'TLSv1_1_method' to force TLS version 1.1, or 'TLS_method' to allow\nany TLS protocol version up to TLSv1.3. It is not recommended to use\nTLS versions less than 1.2, but it may be required for\ninteroperability. Default: none, see minVersion.",
                    "type": "string"
                },
                "sessionIdContext": {
                    "description": "Opaque identifier used by servers to ensure session state is not\nshared between applications. Unused by clients.",
                    "type": "string"
                },
                "sessionTimeout": {
                    "description": "The number of seconds after which a TLS session created by the\nserver will no longer be resumable. See Session Resumption for more\ninformation. Default: 300.",
                    "type": "number"
                },
                "sigalgs": {
                    "description": "Colon-separated list of supported signature algorithms. The list\ncan contain digest algorithms (SHA256, MD5 etc.), public key\nalgorithms (RSA-PSS, ECDSA etc.), combination of both (e.g\n'RSA+SHA384') or TLS v1.3 scheme names (e.g. rsa_pss_pss_sha512).",
                    "type": "string"
                },
                "skipUTF8Validation": {
                    "type": "boolean"
                },
                "ticketKeys": {
                    "additionalProperties": false,
                    "description": "48-bytes of cryptographically strong pseudo-random data.\nSee Session Resumption for more information.",
                    "patternProperties": {
                        "^[0-9]+$": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "ClientRequestArgs": {
            "additionalProperties": false,
            "properties": {
                "_defaultAgent": {
                    "$ref": "#/definitions/Agent"
                },
                "agent": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/Agent"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "auth": {
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "createConnection": {
                    "additionalProperties": false,
                    "type": "object"
                },
                "defaultPort": {
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "family": {
                    "type": "number"
                },
                "headers": {
                    "$ref": "#/definitions/OutgoingHttpHeaders"
                },
                "hints": {
                    "type": "number"
                },
                "host": {
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "hostname": {
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "insecureHTTPParser": {
                    "type": "boolean"
                },
                "localAddress": {
                    "type": "string"
                },
                "localPort": {
                    "type": "number"
                },
                "lookup": {
                    "additionalProperties": false,
                    "type": "object"
                },
                "maxHeaderSize": {
                    "default": 16384,
                    "type": "number"
                },
                "method": {
                    "type": "string"
                },
                "path": {
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "port": {
                    "type": [
                        "null",
                        "string",
                        "number"
                    ]
                },
                "protocol": {
                    "type": [
                        "null",
                        "string"
                    ]
                },
                "setHost": {
                    "type": "boolean"
                },
                "signal": {
                    "$ref": "#/definitions/AbortSignal"
                },
                "socketPath": {
                    "type": "string"
                },
                "timeout": {
                    "type": "number"
                },
                "uniqueHeaders": {
                    "items": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "DataView": {
            "additionalProperties": false,
            "properties": {
                "__@toStringTag@533": {
                    "type": "string"
                },
                "buffer": {
                    "$ref": "#/definitions/ArrayBuffer"
                },
                "byteLength": {
                    "type": "number"
                },
                "byteOffset": {
                    "type": "number"
                }
            },
            "required": [
                "__@toStringTag@533",
                "buffer",
                "byteLength",
                "byteOffset"
            ],
            "type": "object"
        },
        "KeyObject": {
            "additionalProperties": false,
            "properties": {
                "passphrase": {
                    "description": "Optional passphrase.",
                    "type": "string"
                },
                "pem": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Private keys in PEM format."
                }
            },
            "required": [
                "pem"
            ],
            "type": "object"
        },
        "NodeJS.ReadOnlyDict<IncomingMessage[]>": {
            "additionalProperties": {
                "$ref": "#/definitions/T"
            },
            "type": "object"
        },
        "NodeJS.ReadOnlyDict<Socket[]>": {
            "additionalProperties": {
                "$ref": "#/definitions/T"
            },
            "type": "object"
        },
        "OutgoingHttpHeaders": {
            "additionalProperties": false,
            "type": "object"
        },
        "PerMessageDeflateOptions": {
            "additionalProperties": false,
            "properties": {
                "clientMaxWindowBits": {
                    "type": "number"
                },
                "clientNoContextTakeover": {
                    "type": "boolean"
                },
                "concurrencyLimit": {
                    "type": "number"
                },
                "serverMaxWindowBits": {
                    "type": "number"
                },
                "serverNoContextTakeover": {
                    "type": "boolean"
                },
                "threshold": {
                    "type": "number"
                },
                "zlibDeflateOptions": {
                    "additionalProperties": false,
                    "properties": {
                        "chunkSize": {
                            "type": "number"
                        },
                        "dictionary": {
                            "anyOf": [
                                {
                                    "additionalProperties": false,
                                    "patternProperties": {
                                        "^[0-9]+$": {
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "$ref": "#/definitions/DataView"
                                },
                                {
                                    "items": {
                                        "additionalProperties": false,
                                        "patternProperties": {
                                            "^[0-9]+$": {
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            ]
                        },
                        "finishFlush": {
                            "type": "number"
                        },
                        "flush": {
                            "type": "number"
                        },
                        "info": {
                            "type": "boolean"
                        },
                        "level": {
                            "type": "number"
                        },
                        "memLevel": {
                            "type": "number"
                        },
                        "strategy": {
                            "type": "number"
                        },
                        "windowBits": {
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                "zlibInflateOptions": {
                    "$ref": "#/definitions/ZlibOptions"
                }
            },
            "type": "object"
        },
        "PxfObject": {
            "additionalProperties": false,
            "properties": {
                "buf": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "PFX or PKCS12 encoded private key and certificate chain."
                },
                "passphrase": {
                    "description": "Optional passphrase.",
                    "type": "string"
                }
            },
            "required": [
                "buf"
            ],
            "type": "object"
        },
        "T": {
            "additionalProperties": false,
            "type": "object"
        },
        "URL": {
            "additionalProperties": false,
            "properties": {
                "hash": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "href": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "pathname": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "search": {
                    "type": "string"
                },
                "searchParams": {
                    "$ref": "#/definitions/URLSearchParams"
                },
                "username": {
                    "type": "string"
                }
            },
            "required": [
                "hash",
                "host",
                "hostname",
                "href",
                "origin",
                "password",
                "pathname",
                "port",
                "protocol",
                "search",
                "searchParams",
                "username"
            ],
            "type": "object"
        },
        "URLSearchParams": {
            "additionalProperties": false,
            "type": "object"
        },
        "ZlibOptions": {
            "additionalProperties": false,
            "properties": {
                "chunkSize": {
                    "default": "16*1024",
                    "type": "number"
                },
                "dictionary": {
                    "anyOf": [
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[0-9]+$": {
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        {
                            "$ref": "#/definitions/DataView"
                        },
                        {
                            "$ref": "#/definitions/ArrayBuffer"
                        }
                    ]
                },
                "finishFlush": {
                    "default": "constants.Z_FINISH",
                    "type": "number"
                },
                "flush": {
                    "default": "constants.Z_NO_FLUSH",
                    "type": "number"
                },
                "info": {
                    "type": "boolean"
                },
                "level": {
                    "type": "number"
                },
                "maxOutputLength": {
                    "type": "number"
                },
                "memLevel": {
                    "type": "number"
                },
                "strategy": {
                    "type": "number"
                },
                "windowBits": {
                    "type": "number"
                }
            },
            "type": "object"
        }
    },
    "properties": {
        "address": {
            "anyOf": [
                {
                    "$ref": "#/definitions/URL"
                },
                {
                    "type": "string"
                }
            ],
            "default": ""
        },
        "options": {
            "anyOf": [
                {
                    "$ref": "#/definitions/ClientOptions"
                },
                {
                    "$ref": "#/definitions/ClientRequestArgs"
                }
            ]
        },
        "reconnectOnConnectionLost": {
            "default": true,
            "type": "boolean"
        },
        "reconnectRetryInterval": {
            "type": "number"
        }
    },
    "required": [
        "address"
    ],
    "type": "object"
}

